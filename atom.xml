<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SilentSong]]></title>
  
  <link href="/silentsong/atom.xml" rel="self"/>
  <link href="http://dmoneh.github.io/"/>
  <updated>2015-10-16T06:28:06.179Z</updated>
  <id>http://dmoneh.github.io/</id>
  
  <author>
    <name><![CDATA[wangpin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[不常用的sql]]></title>
    <link href="http://dmoneh.github.io/2015/10/16/Not-commonly-used-sql/"/>
    <id>http://dmoneh.github.io/2015/10/16/Not-commonly-used-sql/</id>
    <published>2015-10-16T06:22:47.000Z</published>
    <updated>2015-10-16T06:28:06.179Z</updated>
    <content type="html"><![CDATA[<p>不常用的是最难记住的。</p>
<h2 id="Alter">Alter</h2><h3 id="添加列">添加列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> column_name data_type <span class="keyword">unique</span>/<span class="keyword">default</span>/<span class="keyword">not</span>-<span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'comments'</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除列">删除列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> column_name;</span></span><br></pre></td></tr></table></figure>
<h3 id="更新列">更新列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">change</span> old_column_name new_column_name data_type <span class="keyword">unique</span>/<span class="keyword">default</span>/<span class="keyword">not</span>-<span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'comments'</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加约束">添加约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">constraint</span> fk_name foreign <span class="keyword">key</span>(foreign_column_name) <span class="keyword">references</span> foreign_table_name(references_column_name) <span class="keyword">on</span> <span class="keyword">delete</span>/<span class="keyword">update</span> xxx;</span></span><br></pre></td></tr></table></figure>
<p>mysql 外键约束 on delete和on update</p>
<p>on delete rule：</p>
<ul>
<li>restrict：约束<br>  如果存在从数据，不允许删除主数据。</li>
<li>no action<br>  如果存在从数据，不允许删除主数据。</li>
<li>cascade：级联<br>  删除主数据，顺便也删掉从数据。</li>
<li>set null<br>  删除主数据，从数据外键的值设为null。</li>
</ul>
<p>on update rule：</p>
<ul>
<li>restrict：约束<br>  修改主数据中被关联的field，如果有该主数据有从数据，不允许修改。</li>
<li>no action<br>  修改主数据中被关联的field，如果有该主数据有从数据，不允许修改。</li>
<li>cascade<br>  修改主数据中被关联的field，如果有该主数据有从数据，顺便一起修改从数据的外键值。</li>
<li>set null<br>  修改主数据中被关联的field，如果有该主数据有从数据，从数据的外键值设为null。</li>
</ul>
<h3 id="删除约束">删除约束</h3><p>删除外键示例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> foreign <span class="keyword">key</span> fk_name;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Trigger">Trigger</h2><h3 id="添加trigger">添加trigger</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> table_name</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">new</span>.<span class="keyword">updated</span> = <span class="keyword">NOW</span>();</span></span><br><span class="line"><span class="operator"><span class="keyword">end</span>;</span></span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<h3 id="删除trigger">删除trigger</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">drop</span> <span class="keyword">trigger</span> trigger_name;</span></span><br></pre></td></tr></table></figure>
<p>（未完待续）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不常用的是最难记住的。</p>
<h2 id="Alter">Alter</h2><h3 id="添加列">添加列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="mysql" scheme="http://dmoneh.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于标识符]]></title>
    <link href="http://dmoneh.github.io/2015/09/21/common-identifier/"/>
    <id>http://dmoneh.github.io/2015/09/21/common-identifier/</id>
    <published>2015-09-21T06:12:33.000Z</published>
    <updated>2015-09-21T06:33:29.729Z</updated>
    <content type="html"><![CDATA[<h4 id="标识符是什么">标识符是什么</h4><p>在编程语言中，标识符就是程序员自己规定的具有特定含义的词，比如类名称，属性名称，变量名等。一般我们用英文单词做标志符，常用动词或者名词。<br><a id="more"></a><br>比如</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">user</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的 user ， name ， getName 就是标识符。 其中前两个是名词，后一个是动词+名词。</p>
<h4 id="命名">命名</h4><p>不同的编程语言不同的命名规定，一般来说，标识符可以由一下四种字符构成 $,字母，数字，下划线。一般不能以数字开始，有些语言中，下划线开始表示private的实体（可能只是约定，而非编译器行为）。</p>
<h4 id="常用缩写">常用缩写</h4><p>标识符一般用英语单词组成，有时候单词过长，我们可以用一些<strong><em>熟知</em></strong>的缩写代替。比如：</p>
<p>tempory –&gt; tmp</p>
<p>document –&gt; doc</p>
<p>generator –&gt; gen</p>
<p>specific –&gt; spec</p>
<p>当你不知道改用什么缩写时，可以询问同事，看看公司项目的约定。尽量不要生造缩写。</p>
<h4 id="其他">其他</h4><p>当年在银行做程序员，收到<strong><em>广播</em></strong>邮件，开头称呼是各位<strong><em>高经</em></strong>,经推测是高级经理的意思。不知道是否正确。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="标识符是什么">标识符是什么</h4><p>在编程语言中，标识符就是程序员自己规定的具有特定含义的词，比如类名称，属性名称，变量名等。一般我们用英文单词做标志符，常用动词或者名词。<br>]]>
    
    </summary>
    
      <category term="标识符" scheme="http://dmoneh.github.io/tags/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编程之约定]]></title>
    <link href="http://dmoneh.github.io/2015/09/21/convention-is-necessary/"/>
    <id>http://dmoneh.github.io/2015/09/21/convention-is-necessary/</id>
    <published>2015-09-21T06:01:49.000Z</published>
    <updated>2015-09-21T07:17:07.759Z</updated>
    <content type="html"><![CDATA[<p>记得初学java，彻夜学习马士兵老师的教程，讲到struts 2时，马老师说道，真实的项目开发，命令约定非常重要。当时太年轻，并不明白这句话的真谛，但是还是默默记在心里。等到真正参与项目了，见识了很多因为不约定或者约定不一致而引发的争吵和矛盾，也见识了很多拥有优雅简练的约定的很棒的项目。有很多吐槽，这里就不说了。只是总结一下自己的经验吧。<br><a id="more"></a></p>
<h4 id="1-_约定必须面面俱到">1. 约定必须面面俱到</h4><p>从项目的架构，到各种实体的命名，包括模块，文件，类，对象，变量，方法，注释的格式，等等，凡是开发人员参与的东西，必须都有约定说明。比如，所有的数据库访问对象都必须放在models目录下；所有的标识符必须用驼峰式。</p>
<p>比较专业的程序员，一般都会遵循已有的项目风格，比如，虽然没有命名约定，但是，他会至少参考一下已有代码的命名风格，然后开始写自己的代码。虽然他的风格会和其他的人不一样，至少他是有自己的风格的。但是，总是会有很不负责任的人存在，而且不在少数，他们的风格是，没有风格。高兴注释就注释，不高兴就不注释。有时候变量是驼峰，有时候是下环线。所以，面面俱到是非常必要的。</p>
<h4 id="2-_约定必须简洁">2. 约定必须简洁</h4><p>为什么要简洁？只有简洁的约定，才能被人所接受。</p>
<p>我亲眼见过繁琐约定的诞生，甲说，命名用驼峰式吧，乙说，数据库对象的名词应该用下环线比如 user_model，然后领导说，两种综合一下，于是一个约定诞生了。 可是真的有必要吗？</p>
<p>这个时候，一个独断专行的约定指定人，可能比一个爱接受建议的，更好。</p>
<h4 id="3-_约定必须死板">3. 约定必须死板</h4><p>不遵守约定的代码，对不起，请改了之后再提交。<br>你觉得有个好建议，希望加到约定中，对不起，请接受现有的约定。</p>
<p>当然，应该一定的周期，更新约定，但是不宜频繁。</p>
<h4 id="4-_必须要有人监督约定的实施">4. 必须要有人监督约定的实施</h4><p>再好的约定，没人监督，都会沦为废纸。人都是有惰性的，不要相信自觉。至少，在程序员素质良莠不齐的项目组里，一定要有明确的人来监督实施。</p>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记得初学java，彻夜学习马士兵老师的教程，讲到struts 2时，马老师说道，真实的项目开发，命令约定非常重要。当时太年轻，并不明白这句话的真谛，但是还是默默记在心里。等到真正参与项目了，见识了很多因为不约定或者约定不一致而引发的争吵和矛盾，也见识了很多拥有优雅简练的约定的很棒的项目。有很多吐槽，这里就不说了。只是总结一下自己的经验吧。<br>]]>
    
    </summary>
    
      <category term="principle" scheme="http://dmoneh.github.io/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[curl 简单入门]]></title>
    <link href="http://dmoneh.github.io/2015/09/10/use-curl/"/>
    <id>http://dmoneh.github.io/2015/09/10/use-curl/</id>
    <published>2015-09-10T03:31:28.000Z</published>
    <updated>2015-09-17T06:55:28.352Z</updated>
    <content type="html"><![CDATA[<h3 id="1-什么是_curl">1.什么是 curl</h3><p>curl 官方的说法是一种用来在客户端和服务器之间做数据传输的命令行。简单的说，你可以用下面这个命令，将百度首页的内容下载下来：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://baidu.com</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"refresh"</span> <span class="attribute">content</span>=<span class="value">"0;url=http://www.baidu.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上就是下载的内容，如果你懂html的话，可以发现，百度的首页会自动跳转到 www.baidu.com 这个新地址。</p>
<a id="more"></a>
<p>如果很不幸你需要代理才能上网（比如在公司内网的时候），那你只需要稍微改改这个命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -x <span class="symbol">http:</span>/<span class="regexp">/proxy.com http:/</span><span class="regexp">/baidu.com</span></span><br></pre></td></tr></table></figure></p>
<p>-x 表示启用代理，后面跟的自然就是代理的地址。</p>
<p>如果你想把内容下载成一个文件，也可以：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -x <span class="symbol">http:</span>/<span class="regexp">/proxy.com -o baidu.html http:/</span><span class="regexp">/baidu.com</span></span><br></pre></td></tr></table></figure></p>
<p>-o 表示输出下载内容到一个文件，后面跟的自然就是文件名了。成功执行命令，目录中就会出现这个baidu.html</p>
<p>前面所说的都是从网上下载东西，看起来好像没什么用。是啊，有浏览器，我没还用这个干嘛呢？</p>
<p>可是有一些东西，浏览器是没法做到的。<br>比如，你需要访问一个开源api，你必须传递一些http header，这个时候，浏览器就没办法了。这还只是get请求，如果是post，put呢？</p>
<p>再比如，你需要要测试一些api，需要上传json数据，或者文件，这个时候，即使是postman，也无法又快又好的完成任务。</p>
<p>如果你了解curl，然后你可以预先写一些脚本，方便自己的同时，也可以分享给其他人？何乐而不为呢？</p>
<h3 id="2-_更多用法">2. 更多用法</h3><ul>
<li><p>灵活的header</p>
<p>可以随意的指定header ,一个</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="constant">H </span><span class="string">"name:Joyce"</span></span><br></pre></td></tr></table></figure>
<p>  或者多个</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -<span class="keyword">H</span> <span class="string">"name:Joyce"</span> -<span class="keyword">H</span> <span class="string">"age:100"</span></span><br></pre></td></tr></table></figure>
<p>  或者引用本地文件内容,比如token</p>
  <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -H <span class="string">"Authorization:$&#123;cat token.txt&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>随意指定http method</p>
<p>如果你不指定，默认就是GET。</p>
<p>这是POST</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="constant">XPOST</span></span><br></pre></td></tr></table></figure>
<p>-X表示指定method</p>
</li>
<li><p>发送数据</p>
<p>可以将数据post或者put到远端。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPUT <span class="string">http:</span><span class="comment">//des.com -d <span class="label">xxx</span></span></span><br></pre></td></tr></table></figure>
<p>-d 后面就是你想要put到<a href="http://des.com的数据，需要注意的是，对于一些数据，可能需要预先指定传输格式：" target="_blank" rel="external">http://des.com的数据，需要注意的是，对于一些数据，可能需要预先指定传输格式：</a><br>比如，对于图片，用 –data-binary，表示传输二进制数据。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPUT http://des.com --<span class="preprocessor">data</span>-<span class="keyword">binary </span><span class="comment">@icon.jpg</span></span><br></pre></td></tr></table></figure>
<p>这里的 @ 表示从指定文件中获取数据。</p>
<p>对于json数据，除了指定 content-type之外，还要注意一下json格式。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XPOST -H <span class="string">"Content-Type: application/json"</span> http://des.com -d '&#123;<span class="string">"name"</span>:<span class="string">"silentsong"</span>&#125;'</span><br></pre></td></tr></table></figure>
<p>上面json中的key和value都必须用双引号包装起来，整个json数据必须包含在单引号之中。</p>
</li>
</ul>
<ul>
<li><p>form 支持</p>
<p>curl支持上传一个form表单。比如最常见的登录表单</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl  -XPUT -F name=slientsong -F password=<span class="number">123</span> http:<span class="comment">//dmoneh.github.io/silentsong/login</span></span><br></pre></td></tr></table></figure>
<p>有时候，表单中会有上传文件</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="constant">XPUT </span>-<span class="constant">F </span>file=<span class="variable">@upload</span>.json <span class="symbol">http:</span>/<span class="regexp">/dmoneh.github.io/silentsong</span><span class="regexp">/files</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>探查http交互情况</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -x <span class="string">http:</span><span class="comment">//myproxy:8080 http://baidu.com</span></span><br><span class="line"></span><br><span class="line"> * Adding <span class="string">handle:</span> <span class="string">conn:</span> <span class="number">0x652be0</span></span><br><span class="line"> * Adding <span class="string">handle:</span> <span class="string">send:</span> <span class="number">0</span></span><br><span class="line"> * Adding <span class="string">handle:</span> <span class="string">recv:</span> <span class="number">0</span></span><br><span class="line"> * <span class="string">Curl_addHandleToPipeline:</span> <span class="string">length:</span> <span class="number">1</span></span><br><span class="line"> * - Conn <span class="number">0</span> (<span class="number">0x652be0</span>) <span class="string">send_pipe:</span> <span class="number">1</span>, <span class="string">recv_pipe:</span> <span class="number">0</span></span><br><span class="line"> * About to connect() to proxy myproxy port <span class="number">8080</span></span><br><span class="line"> *   Trying <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>...</span><br><span class="line"> * Connected to myproxy (<span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>) port <span class="number">808</span></span><br><span class="line"> &gt; GET <span class="string">http:</span><span class="comment">//baidu.com/ HTTP/1.1</span></span><br><span class="line"> &gt; User-<span class="string">Agent:</span> curl/<span class="number">7.30</span><span class="number">.0</span></span><br><span class="line"> &gt; <span class="string">Host:</span> baidu.com</span><br><span class="line"> &gt; <span class="string">Accept:</span> *<span class="comment">/*</span><br><span class="line"> &gt; Proxy-Connection: Keep-Alive</span><br><span class="line"> &gt;</span><br><span class="line"> &lt; HTTP/1.1 200 OK</span><br><span class="line"> &lt; Date: Wed, 09 Sep 2015 05:39:38 GMT</span><br><span class="line"> * Server Apache is not blacklisted</span><br><span class="line"> &lt; Server: Apache</span><br><span class="line"> &lt; Cache-Control: max-age=86400</span><br><span class="line"> &lt; Expires: Thu, 10 Sep 2015 05:39:38 GMT</span><br><span class="line"> &lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class="line"> &lt; ETag: "51-4b4c7d90"</span><br><span class="line"> &lt; Accept-Ranges: bytes</span><br><span class="line"> &lt; Content-Length: 81</span><br><span class="line"> &lt; Content-Type: text/html</span><br><span class="line"> &lt; Proxy-Connection: Keep-Alive</span><br><span class="line"> &lt; Connection: Keep-Alive</span><br><span class="line"> &lt; Age: 83195</span><br><span class="line"> &lt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;meta http-equiv="refresh" content="0;url=http://www.baidu.co</span><br><span class="line"> &lt;/html&gt;</span><br><span class="line"> * Connection #0 to host myproxy left intact</span></span><br></pre></td></tr></table></figure>
<p>仔细看一下上面的信息，&gt; 表示从本地发出的http 头信息，&lt; 表示远端返回的头信息，* 表示 curl额外提供的信息（非标准的http信息）。</p>
<p>我们可以看到代理的一部分工作，接受我们的请求，返回请求数据。相当于一个网关。</p>
</li>
</ul>
<h3 id="3-_总结">3. 总结</h3><p>curl 是一个很有用的工具，一般人我不告诉的哦。</p>
<p>下一步打算翻译一下 <a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">curl man page</a>,做一些页面美化和排版，以方便使用。</p>
<p>敬请关注。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-什么是_curl">1.什么是 curl</h3><p>curl 官方的说法是一种用来在客户端和服务器之间做数据传输的命令行。简单的说，你可以用下面这个命令，将百度首页的内容下载下来：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://baidu.com</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"refresh"</span> <span class="attribute">content</span>=<span class="value">"0;url=http://www.baidu.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上就是下载的内容，如果你懂html的话，可以发现，百度的首页会自动跳转到 www.baidu.com 这个新地址。</p>]]>
    
    </summary>
    
      <category term="curl" scheme="http://dmoneh.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node 单元测试 - Mocha]]></title>
    <link href="http://dmoneh.github.io/2015/09/01/node-unit-test-by-mocha/"/>
    <id>http://dmoneh.github.io/2015/09/01/node-unit-test-by-mocha/</id>
    <published>2015-09-01T08:17:24.000Z</published>
    <updated>2015-09-10T07:42:20.213Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>mocha 是一个基于 nodejs 的单元测试框架。<br><a id="more"></a><br><a href="http://mochajs.org/" target="_blank" rel="external">mocha 官网</a></p>
<p>命名约定：</p>
<ul>
<li><p>test case == 测试用例 </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'description'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>test suite == 测试集 (eg: descript(‘xxx’,function(){}))</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'description'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装及入门">安装及入门</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> mocha -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>下面是一个小例子：</p>
<p>hello.js<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> var <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">"assert"</span>);</span><br><span class="line"> describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line"> describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">   it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="built_in">assert</span>.equal(-<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">5</span>));</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mocha hello.js</span><br><span class="line"></span><br><span class="line"> Array</span><br><span class="line">   <span class="comment">#indexOf()</span></span><br><span class="line">     √ should <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">when</span> the value <span class="keyword">is</span> <span class="keyword">not</span> present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span> passing (<span class="number">20</span>ms)</span><br></pre></td></tr></table></figure>
<p>可以看到测试通过了： 1 passing 。 </p>
<p>修改一下hello.js ，使它失败。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">"assert"</span>);</span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">assert</span>.equal(-<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">1</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再次测试</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ mocha hello.js</span><br><span class="line"></span><br><span class="line">  Array</span><br><span class="line">    <span class="preprocessor">#indexOf()</span></span><br><span class="line">      <span class="number">1</span>) should <span class="keyword">return</span> -<span class="number">1</span> when the value is not present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span> passing (<span class="number">19</span>ms)</span><br><span class="line">  <span class="number">1</span> failing</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>) Array <span class="preprocessor">#indexOf() should return -<span class="number">1</span> when the value is not present:</span></span><br><span class="line"></span><br><span class="line">      AssertionError: -<span class="number">1</span> == <span class="number">0</span></span><br><span class="line">      + expected - actual</span><br><span class="line"></span><br><span class="line">      --<span class="number">1</span></span><br><span class="line">      +<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>输出信息中还会包含很多 stack trace，这里忽略它。</p>
<p>ok，我们基本入门了。</p>
<h2 id="组织结构">组织结构</h2><p>项目中，我们一般会在根目录下新建 test 目录，并且，将所有测试js放在这个目录。然后，在根目录下运行<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mocha</span><br></pre></td></tr></table></figure></p>
<p>就会依次执行 test 目录中的测试。</p>
<h2 id="用法">用法</h2><p>大部分用法都是从官网 copy 的代码，但是 copy 下来的代码其实只是一个示范，并不能直接运行。 为了方便观察效果， 我加入了一些代码，以便他们可以直接执行。</p>
<h3 id="1_异步">1 异步</h3><p>基于 callback 的：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.save = <span class="function"><span class="keyword">function</span><span class="params">(callback)</span></span>&#123;</span><br><span class="line">  <span class="keyword">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> should = require(<span class="string">'should'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#save 1()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'should save without error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Luna'</span>);</span><br><span class="line">      user.save(<span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        done();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#save 2()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'should save without error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Luna'</span>);</span><br><span class="line">      user.save(done);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>基于 promise 的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>),</span><br><span class="line">  chaiAsPromised = <span class="built_in">require</span>(<span class="string">"chai-as-promised"</span>),</span><br><span class="line">  Q = <span class="built_in">require</span>(<span class="string">'q'</span>),</span><br><span class="line">  should = chai.should();</span><br><span class="line"></span><br><span class="line">chai.use(chaiAsPromised);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.users = [];</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.save = <span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.users = users;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.users;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> DB();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#find()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> db.clear()</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.save([<span class="string">'tobi'</span>, <span class="string">'loki'</span>, <span class="string">'jane'</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'respond with matching records'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    db.find().should.eventually.have.length(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的测试是对官网例子的补充。 拙劣的模拟db，勿怪。<br>依赖的库 <a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a>，<a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a>。 官网中提到后者，但是没有提及用法。</p>
<h3 id="2-_Hooks">2. Hooks</h3><p>Mocha 提供了 before(), after(), beforeEach() 和 afterEach(), 事实上， 很多测试框架都提供了这些函数，以用于在测试之前准备数据，在测试之后清理数据，等等。 比如 <a href="http://dmoneh.github.io/jasmine-chinesedoc/">Jasmine</a>。 </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在全部测试执行之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在全部测试执行之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在每一个测试执行之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在每一个测试执行之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-_Pending_Tests">3. Pending Tests</h3><p>有些时候，我们会先创建一个不包含测试函数的 test case, 最后再由自己或者其他人补充测试函数。这种 test case 就叫做 pending test。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// pending test below</span></span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>运行测试，输出的信息是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">  <span class="preprocessor">#indexOf()</span></span><br><span class="line">    - should <span class="keyword">return</span> -<span class="number">1</span> when the value is not present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> passing (<span class="number">13</span>ms)</span><br><span class="line"><span class="number">1</span> pending</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_灵活的选取test_suite_和_test_case">4. 灵活的选取test suite 和 test case</h3><p>mocha支持 only 和 skip 方法， 前者用于指定一个唯一执行的测试， 后者用于跳过某一个测试。这里所说的测试，包括 suite 和 case。</p>
<ul>
<li><p>Exclusive Tests（单独测试）</p>
<p>有时候，我们需要单独测试某一个测试集(test suite)或者测试用例(test case)。</p>
<p><strong><em>请确保只在一个地方使用 only</em></strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe.only(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line">    </span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it.only(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>`</p>
</li>
<li><p>跳过测试</p>
<p>有时候，我们需要暂时的跳过某些测试。 可以使用 skip 方法跳过某些测试，并且，这些测试会在测试报告中显示为 pending 状态。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> describe.skip(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it.skip(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结">总结</h2><p>mocha 是一个灵活的 js 测试框架， 它本身不支持断言，promise等语法，但是可以通过第三方库，如<a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should.js</a>,<a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a>，<a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a>，<a href="http://documentup.com/kriskowal/q/" target="_blank" rel="external">q</a>,来扩展自己的功能。由此看见，设计一个伟大的框架，不是一定要面面俱到，但是一定要保留开放的接口，以供和其他库交互。 这样， 一方面，框架本身不会太过庞大，其次，可以通过开发的接口，借助开源的力量，逐渐丰富自己的生态系统。最后，终端用户，也可以根据自己的需求，搭建适合的测试系统。</p>
<p>好像跑题了。。。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://mochajs.org/" target="_blank" rel="external">mocha</a></li>
<li><a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should.js</a></li>
<li><a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a></li>
<li><a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a></li>
<li><a href="http://documentup.com/kriskowal/q/" target="_blank" rel="external">q</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>mocha 是一个基于 nodejs 的单元测试框架。<br>]]>
    
    </summary>
    
      <category term="node,unit test" scheme="http://dmoneh.github.io/tags/node-unit-test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nodejs 内置的 unit test 模块 - assert]]></title>
    <link href="http://dmoneh.github.io/2015/09/01/node-assert-for-unit-test/"/>
    <id>http://dmoneh.github.io/2015/09/01/node-assert-for-unit-test/</id>
    <published>2015-09-01T05:15:36.000Z</published>
    <updated>2015-09-10T05:03:36.683Z</updated>
    <content type="html"><![CDATA[<p>Nodejs 有一个叫做 <a href="https://nodejs.org/api/assert.html" target="_blank" rel="external">assert</a> 的模块，可以用来做简单的 断言。<br><a id="more"></a><br>下面是一个小例子。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">assert</span> = require('<span class="keyword">assert</span>');</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">ret</span> = <span class="keyword">assert</span>.ok(true); </span><br><span class="line">console.<span class="literal">log</span>('<span class="keyword">ret</span>: ' + <span class="keyword">ret</span>);</span><br></pre></td></tr></table></figure>
<p>上面的例子中，assert.ok 用于检测测试值是否为 true。 很显然，测试应该通过。<br>运行，发现没有打印任何信息，而返回值 ret 也是 undefined 。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node <span class="number">001</span><span class="class">.asssert</span><span class="class">.js</span></span><br><span class="line">ret: undefined</span><br></pre></td></tr></table></figure></p>
<p>如果检查一下程序的退出状态<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>echo <span class="variable">$?</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>熟悉linux的朋友应该知道， 这代表程序正常结束了。 我把它叫做状态码。</p>
<p>如果我们运行一个不能通过的测试呢？<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">assert</span> = require('<span class="keyword">assert</span>');</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">ret</span> = <span class="keyword">assert</span>.ok(false); </span><br><span class="line">console.<span class="literal">log</span>('<span class="keyword">ret</span>: ' + <span class="keyword">ret</span>);</span><br></pre></td></tr></table></figure></p>
<p>这一次，结果是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ node <span class="number">001.</span>asssert.js</span><br><span class="line"></span><br><span class="line">assert.js:<span class="number">86</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> assert.AssertionError(&#123;</span><br><span class="line">        ^</span><br><span class="line">AssertionError: <span class="literal">false</span> == <span class="literal">true</span></span><br><span class="line">    at Object.&lt;anonymous&gt; (d:\workspace\node\learn-node\<span class="number">001.</span>asssert.js:<span class="number">2</span>:<span class="number">18</span>)</span><br><span class="line">    at Module._compile (module.js:<span class="number">460</span>:<span class="number">26</span>)</span><br><span class="line">    at Object.Module._extensions..js (module.js:<span class="number">478</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (module.js:<span class="number">355</span>:<span class="number">32</span>)</span><br><span class="line">    at Function.Module._load (module.js:<span class="number">310</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module.runMain (module.js:<span class="number">501</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="function">at <span class="title">startup</span> <span class="params">(node.js:<span class="number">129</span>:<span class="number">16</span>)</span></span><br><span class="line">    at node.js:814:3</span></span><br></pre></td></tr></table></figure></p>
<p>再检查一下状态码。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>echo <span class="variable">$?</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这一次，程序没有正常退出。<br>看起来，我们可以通过测试程序的结束状态来得知全部测试是否通过。<br>至于每一个独立的测试是否通过，需要查看打印的信息。 但是，assert的打印信息并不是那么容易阅读的。 事实上，对于单元测试， 程序员只关心每个case是否通过，抛出下面这样的 stack 对与测试来说，并没有什么意义：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assert.js:<span class="number">86</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> assert.AssertionError(&#123;</span><br><span class="line">        ^</span><br><span class="line">AssertionError: <span class="literal">false</span> == <span class="literal">true</span></span><br><span class="line">    at Object.&lt;anonymous&gt; (d:\workspace\node\learn-node\<span class="number">001.</span>asssert.js:<span class="number">2</span>:<span class="number">18</span>)</span><br><span class="line">    at Module._compile (module.js:<span class="number">460</span>:<span class="number">26</span>)</span><br><span class="line">    at Object.Module._extensions..js (module.js:<span class="number">478</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (module.js:<span class="number">355</span>:<span class="number">32</span>)</span><br><span class="line">    at Function.Module._load (module.js:<span class="number">310</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module.runMain (module.js:<span class="number">501</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="function">at <span class="title">startup</span> <span class="params">(node.js:<span class="number">129</span>:<span class="number">16</span>)</span></span><br><span class="line">    at node.js:814:3</span></span><br></pre></td></tr></table></figure>
<p>理想的单元测试，应该可以定义测试用例的名字， 应该在测试完成之后， 输出测试用例的名字和通过状态。 assert 并不能完成这样的工作， 但是它具备了基本的行为模式： 测试，输出测试状态。 所以， 它可以作为单元测试框架的断言库，事实上，<a href="https://mochajs.org/" target="_blank" rel="external">mocha</a>，一种比较流行的测试框架， 确实支持用 node assert 做断言库。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nodejs 有一个叫做 <a href="https://nodejs.org/api/assert.html">assert</a> 的模块，可以用来做简单的 断言。<br>]]>
    
    </summary>
    
      <category term="node,unit test" scheme="http://dmoneh.github.io/tags/node-unit-test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端也应该懂 curl]]></title>
    <link href="http://dmoneh.github.io/2015/08/27/frontend-should-know-curl/"/>
    <id>http://dmoneh.github.io/2015/08/27/frontend-should-know-curl/</id>
    <published>2015-08-27T04:22:43.000Z</published>
    <updated>2015-09-10T05:00:26.457Z</updated>
    <content type="html"><![CDATA[<p>有一天，pm询问我，生产环境上有一个 report 系统无法从客户端访问，到底是什么问题。<br><a id="more"></a></p>
<p>我怀疑是 report 的服务器挂掉了，于是我打开浏览器，输入服务器的host，然后网页显示打不开。 </p>
<p>然后，我自信的告诉 pm ， 应该是服务器上没有部署或者对应的服务器挂掉了，得去问问运维的人。 然后我发了一封邮件给运维的组。</p>
<p>过了一会，我收到来自一个资深同事的回复,他贴了一段 curl 的信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* Hostname was NOT found in DNS cache</span><br><span class="line">*   Trying xxxxx ...</span><br><span class="line">* Connected to web-proxy.houston.hp.com (xxxxx) port <span class="number">8080</span> (<span class="preprocessor">#<span class="number">0</span>)</span></span><br><span class="line">* Establish HTTP proxy tunnel to xxx:<span class="number">443</span></span><br><span class="line">&gt; CONNECT xxx:<span class="number">443</span> HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; Host: xxx:</span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.35</span><span class="number">.0</span></span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> Connection established</span><br><span class="line">&lt; </span><br><span class="line">* Proxy replied OK to CONNECT request</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: none</span><br><span class="line">  CApath: /etc/ssl/certs</span><br><span class="line">* SSLv3, TLS handshake, <span class="function">Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Server <span class="title">hello</span> <span class="params">(<span class="number">2</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">CERT</span> <span class="params">(<span class="number">11</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Server <span class="title">finished</span> <span class="params">(<span class="number">14</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Client key <span class="title">exchange</span> <span class="params">(<span class="number">16</span>)</span>:</span><br><span class="line">* SSLv3, TLS change cipher, Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">Finished</span> <span class="params">(<span class="number">20</span>)</span>:</span><br><span class="line">* SSLv3, TLS change cipher, Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">Finished</span> <span class="params">(<span class="number">20</span>)</span>:</span><br><span class="line">* SSL connection <span class="keyword">using</span> AES128-SHA</span><br><span class="line">* Server certificate:</span><br><span class="line">*        subject: C</span>=US; ST=CA; L=Sunnyvale; O=Hewlett Packard; OU=HP Web Services; OU=PremiumSSL Wildcard; CN=*.xxx</span><br><span class="line">*        start date: <span class="number">2013</span>-<span class="number">09</span>-<span class="number">07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT</span><br><span class="line">*        expire date: <span class="number">2014</span>-<span class="number">09</span>-<span class="number">07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> GMT</span><br><span class="line">*        issuer: C=GB; ST=Greater Manchester; L=Salford; O=COMODO CA Limited; CN=COMODO High-Assurance Secure Server CA</span><br><span class="line">*        SSL certificate verify result: <span class="function">certificate has <span class="title">expired</span> <span class="params">(<span class="number">10</span>)</span>, continuing anyway.</span><br><span class="line">&gt; GET /xxx/xxx/xxx?:embed</span>=no&amp;:customViews=yes&amp;devid=<span class="number">94663018</span>-baa2-<span class="number">11e3</span>-<span class="number">99</span>da-<span class="number">1</span>cc1de6f6c7e&amp;token=bearer%<span class="number">200</span>%<span class="number">2F</span>xjdNJ%<span class="number">2F</span>FTTeG3TSfxU93hYA HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.35</span><span class="number">.0</span></span><br><span class="line">&gt; Host: xxx</span><br><span class="line">&gt; Accept: *<span class="comment">/*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 403 Forbidden</span><br><span class="line">* Server nginx/1.6.2 is not blacklisted</span><br><span class="line">&lt; Server: nginx/1.6.2</span><br><span class="line">&lt; Date: Thu, 27 Aug 2015 04:05:15 GMT</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; X-HP-DE<span class="doctag">BUG:</span> xxx :bearer 0/xjdNJ/FTTeG3TSfxU93hYA 403:Permission denied|</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host xxx left intact</span></span><br></pre></td></tr></table></figure>
<p>然后他告诉我们，因为服务器的反向代理的黑名单机制，所以我们的访问都被拒绝了。 再然后， 问题修复。</p>
<p>我深深的被 curl 这个命令折服了。简简单单的一条命令，但是却可以将网络的状况，路由的跳转一一告诉我们，让我们知道，问题大概出在哪里了。 而不是像我之前的做法，只是知道服务器有问题了，但是却并不明白问题是什么。 </p>
<p>作为偏前端的开发，大多数时候，我们都不会接触到后台的服务器，不会了解到简简单单一个http请求，到底辗转多少次，才到达最终的服务。也不明白，看似一般的服务器不响应，其实可能有很多不同的原因。我们也确实没有精力和机会去探索后台服务器的拓扑结构。 但是， curl 命令给了我们这样的能力，可以从最熟悉的http开始，了解后台的构成，机制。 不仅仅是可以解决类似的问题。 而且，也可以开拓视野。仅仅只关注自己业务的部分，很多时候，是远远不够的。</p>
<p><a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">curl 参考</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有一天，pm询问我，生产环境上有一个 report 系统无法从客户端访问，到底是什么问题。<br>]]>
    
    </summary>
    
      <category term="curl" scheme="http://dmoneh.github.io/tags/curl/"/>
    
  </entry>
  
</feed>
