<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SilentSong]]></title>
  
  <link href="/silentsong/atom.xml" rel="self"/>
  <link href="http://dmoneh.github.io/"/>
  <updated>2015-09-07T02:46:50.024Z</updated>
  <id>http://dmoneh.github.io/</id>
  
  <author>
    <name><![CDATA[wangpin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Node 单元测试 - Mocha]]></title>
    <link href="http://dmoneh.github.io/2015/09/01/node-unit-test-by-mocha/"/>
    <id>http://dmoneh.github.io/2015/09/01/node-unit-test-by-mocha/</id>
    <published>2015-09-01T08:17:24.000Z</published>
    <updated>2015-09-07T02:46:50.024Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>mocha 是一个基于 nodejs 的单元测试框架。<br><a id="more"></a><br><a href="http://mochajs.org/" target="_blank" rel="external">mocha 官网</a></p>
<p>命名约定：</p>
<ul>
<li><p>test case == 测试用例 </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'description'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>test suite == 测试集 (eg: descript(‘xxx’,function(){}))</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'description'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装及入门">安装及入门</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> mocha -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>下面是一个小例子：</p>
<p>hello.js<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> var <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">"assert"</span>);</span><br><span class="line"> describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line"> describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">   it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="built_in">assert</span>.equal(-<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">5</span>));</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mocha hello.js</span><br><span class="line"></span><br><span class="line"> Array</span><br><span class="line">   <span class="comment">#indexOf()</span></span><br><span class="line">     √ should <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">when</span> the value <span class="keyword">is</span> <span class="keyword">not</span> present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span> passing (<span class="number">20</span>ms)</span><br></pre></td></tr></table></figure>
<p>可以看到测试通过了： 1 passing 。 </p>
<p>修改一下hello.js ，使它失败。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">assert</span> = <span class="built_in">require</span>(<span class="string">"assert"</span>);</span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">assert</span>.equal(-<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">1</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再次测试</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ mocha hello.js</span><br><span class="line"></span><br><span class="line">  Array</span><br><span class="line">    <span class="preprocessor">#indexOf()</span></span><br><span class="line">      <span class="number">1</span>) should <span class="keyword">return</span> -<span class="number">1</span> when the value is not present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span> passing (<span class="number">19</span>ms)</span><br><span class="line">  <span class="number">1</span> failing</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>) Array <span class="preprocessor">#indexOf() should return -<span class="number">1</span> when the value is not present:</span></span><br><span class="line"></span><br><span class="line">      AssertionError: -<span class="number">1</span> == <span class="number">0</span></span><br><span class="line">      + expected - actual</span><br><span class="line"></span><br><span class="line">      --<span class="number">1</span></span><br><span class="line">      +<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>输出信息中还会包含很多 stack trace，这里忽略它。</p>
<p>ok，我们基本入门了。</p>
<h2 id="组织结构">组织结构</h2><p>项目中，我们一般会在根目录下新建 test 目录，并且，将所有测试js放在这个目录。然后，在根目录下运行<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mocha</span><br></pre></td></tr></table></figure></p>
<p>就会依次执行 test 目录中的测试。</p>
<h2 id="用法">用法</h2><p>大部分用法都是从官网 copy 的代码，但是 copy 下来的代码其实只是一个示范，并不能直接运行。 为了方便观察效果， 我加入了一些代码，以便他们可以直接执行。</p>
<h3 id="1_异步">1 异步</h3><p>基于 callback 的：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.save = <span class="function"><span class="keyword">function</span><span class="params">(callback)</span></span>&#123;</span><br><span class="line">  <span class="keyword">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> should = require(<span class="string">'should'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#save 1()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'should save without error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Luna'</span>);</span><br><span class="line">      user.save(<span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        done();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#save 2()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'should save without error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Luna'</span>);</span><br><span class="line">      user.save(done);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>基于 promise 的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>),</span><br><span class="line">  chaiAsPromised = <span class="built_in">require</span>(<span class="string">"chai-as-promised"</span>),</span><br><span class="line">  Q = <span class="built_in">require</span>(<span class="string">'q'</span>),</span><br><span class="line">  should = chai.should();</span><br><span class="line"></span><br><span class="line">chai.use(chaiAsPromised);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.users = [];</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//do nothing</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.save = <span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.users = users;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.users;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> DB();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#find()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> db.clear()</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.save([<span class="string">'tobi'</span>, <span class="string">'loki'</span>, <span class="string">'jane'</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'respond with matching records'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    db.find().should.eventually.have.length(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的测试是对官网例子的补充。 拙劣的模拟db，勿怪。<br>依赖的库 <a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a>，<a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a>。 官网中提到后者，但是没有提及用法。</p>
<h3 id="2-_Hooks">2. Hooks</h3><p>Mocha 提供了 before(), after(), beforeEach() 和 afterEach(), 事实上， 很多测试框架都提供了这些函数，以用于在测试之前准备数据，在测试之后清理数据，等等。 比如 <a href="http://dmoneh.github.io/jasmine-chinesedoc/">Jasmine</a>。 </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在全部测试执行之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在全部测试执行之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在每一个测试执行之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在每一个测试执行之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-_Pending_Tests">3. Pending Tests</h3><p>有些时候，我们会先创建一个不包含测试函数的 test case, 最后再由自己或者其他人补充测试函数。这种 test case 就叫做 pending test。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// pending test below</span></span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>运行测试，输出的信息是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">  <span class="preprocessor">#indexOf()</span></span><br><span class="line">    - should <span class="keyword">return</span> -<span class="number">1</span> when the value is not present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> passing (<span class="number">13</span>ms)</span><br><span class="line"><span class="number">1</span> pending</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_灵活的选取test_suite_和_test_case">4. 灵活的选取test suite 和 test case</h3><p>mocha支持 only 和 skip 方法， 前者用于指定一个唯一执行的测试， 后者用于跳过某一个测试。这里所说的测试，包括 suite 和 case。</p>
<ul>
<li><p>Exclusive Tests（单独测试）</p>
<p>有时候，我们需要单独测试某一个测试集(test suite)或者测试用例(test case)。</p>
<p><strong><em>请确保只在一个地方使用 only</em></strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe.only(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line">    </span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it.only(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>`</p>
</li>
<li><p>跳过测试</p>
<p>有时候，我们需要暂时的跳过某些测试。 可以使用 skip 方法跳过某些测试，并且，这些测试会在测试报告中显示为 pending 状态。</p>
 <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> describe.skip(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    it.skip(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结">总结</h2><p>mocha 是一个灵活的 js 测试框架， 它本身不支持断言，promise等语法，但是可以通过第三方库，如<a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should.js</a>,<a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a>，<a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a>，<a href="http://documentup.com/kriskowal/q/" target="_blank" rel="external">q</a>,来扩展自己的功能。由此看见，设计一个伟大的框架，不是一定要面面俱到，但是一定要保留开放的接口，以供和其他库交互。 这样， 一方面，框架本身不会太过庞大，其次，可以通过开发的接口，借助开源的力量，逐渐丰富自己的生态系统。最后，终端用户，也可以根据自己的需求，搭建适合的测试系统。</p>
<p>好像跑题了。。。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://mochajs.org/" target="_blank" rel="external">mocha</a></li>
<li><a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should.js</a></li>
<li><a href="http://chaijs.com/guide/" target="_blank" rel="external">chai</a></li>
<li><a href="https://www.npmjs.com/package/chai-as-promised" target="_blank" rel="external">chai-as-promised</a></li>
<li><a href="http://documentup.com/kriskowal/q/" target="_blank" rel="external">q</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>mocha 是一个基于 nodejs 的单元测试框架。<br>]]>
    
    </summary>
    
      <category term="node,unit-test" scheme="http://dmoneh.github.io/tags/node-unit-test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nodejs 内置的 unit test 模块 - assert]]></title>
    <link href="http://dmoneh.github.io/2015/09/01/node-assert-for-unit-test/"/>
    <id>http://dmoneh.github.io/2015/09/01/node-assert-for-unit-test/</id>
    <published>2015-09-01T05:15:36.000Z</published>
    <updated>2015-09-07T02:37:20.326Z</updated>
    <content type="html"><![CDATA[<p>Nodejs 有一个叫做 <a href="https://nodejs.org/api/assert.html" target="_blank" rel="external">assert</a> 的模块，可以用来做简单的 断言。<br><a id="more"></a><br>下面是一个小例子。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">assert</span> = require('<span class="keyword">assert</span>');</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">ret</span> = <span class="keyword">assert</span>.ok(true); </span><br><span class="line">console.<span class="literal">log</span>('<span class="keyword">ret</span>: ' + <span class="keyword">ret</span>);</span><br></pre></td></tr></table></figure>
<p>上面的例子中，assert.ok 用于检测测试值是否为 true。 很显然，测试应该通过。<br>运行，发现没有打印任何信息，而返回值 ret 也是 undefined 。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node <span class="number">001</span><span class="class">.asssert</span><span class="class">.js</span></span><br><span class="line">ret: undefined</span><br></pre></td></tr></table></figure></p>
<p>如果检查一下程序的退出状态<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>echo <span class="variable">$?</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>熟悉linux的朋友应该知道， 这代表程序正常结束了。 我把它叫做状态码。</p>
<p>如果我们运行一个不能通过的测试呢？<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">assert</span> = require('<span class="keyword">assert</span>');</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">ret</span> = <span class="keyword">assert</span>.ok(false); </span><br><span class="line">console.<span class="literal">log</span>('<span class="keyword">ret</span>: ' + <span class="keyword">ret</span>);</span><br></pre></td></tr></table></figure></p>
<p>这一次，结果是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ node <span class="number">001.</span>asssert.js</span><br><span class="line"></span><br><span class="line">assert.js:<span class="number">86</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> assert.AssertionError(&#123;</span><br><span class="line">        ^</span><br><span class="line">AssertionError: <span class="literal">false</span> == <span class="literal">true</span></span><br><span class="line">    at Object.&lt;anonymous&gt; (d:\workspace\node\learn-node\<span class="number">001.</span>asssert.js:<span class="number">2</span>:<span class="number">18</span>)</span><br><span class="line">    at Module._compile (module.js:<span class="number">460</span>:<span class="number">26</span>)</span><br><span class="line">    at Object.Module._extensions..js (module.js:<span class="number">478</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (module.js:<span class="number">355</span>:<span class="number">32</span>)</span><br><span class="line">    at Function.Module._load (module.js:<span class="number">310</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module.runMain (module.js:<span class="number">501</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="function">at <span class="title">startup</span> <span class="params">(node.js:<span class="number">129</span>:<span class="number">16</span>)</span></span><br><span class="line">    at node.js:814:3</span></span><br></pre></td></tr></table></figure></p>
<p>再检查一下状态码。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>echo <span class="variable">$?</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这一次，程序没有正常退出。<br>看起来，我们可以通过测试程序的结束状态来得知全部测试是否通过。<br>至于每一个独立的测试是否通过，需要查看打印的信息。 但是，assert的打印信息并不是那么容易阅读的。 事实上，对于单元测试， 程序员只关心每个case是否通过，抛出下面这样的 stack 对与测试来说，并没有什么意义：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assert.js:<span class="number">86</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> assert.AssertionError(&#123;</span><br><span class="line">        ^</span><br><span class="line">AssertionError: <span class="literal">false</span> == <span class="literal">true</span></span><br><span class="line">    at Object.&lt;anonymous&gt; (d:\workspace\node\learn-node\<span class="number">001.</span>asssert.js:<span class="number">2</span>:<span class="number">18</span>)</span><br><span class="line">    at Module._compile (module.js:<span class="number">460</span>:<span class="number">26</span>)</span><br><span class="line">    at Object.Module._extensions..js (module.js:<span class="number">478</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (module.js:<span class="number">355</span>:<span class="number">32</span>)</span><br><span class="line">    at Function.Module._load (module.js:<span class="number">310</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module.runMain (module.js:<span class="number">501</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="function">at <span class="title">startup</span> <span class="params">(node.js:<span class="number">129</span>:<span class="number">16</span>)</span></span><br><span class="line">    at node.js:814:3</span></span><br></pre></td></tr></table></figure>
<p>理想的单元测试，应该可以定义测试用例的名字， 应该在测试完成之后， 输出测试用例的名字和通过状态。 assert 并不能完成这样的工作， 但是它具备了基本的行为模式： 测试，输出测试状态。 所以， 它可以作为单元测试框架的断言库，事实上，<a href="https://mochajs.org/" target="_blank" rel="external">mocha</a>，一种比较流行的测试框架， 确实支持用 node assert 做断言库。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nodejs 有一个叫做 <a href="https://nodejs.org/api/assert.html">assert</a> 的模块，可以用来做简单的 断言。<br>]]>
    
    </summary>
    
      <category term="node,unit-test" scheme="http://dmoneh.github.io/tags/node-unit-test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端也应该懂 curl]]></title>
    <link href="http://dmoneh.github.io/2015/08/27/frontend-should-know-curl/"/>
    <id>http://dmoneh.github.io/2015/08/27/frontend-should-know-curl/</id>
    <published>2015-08-27T04:22:43.000Z</published>
    <updated>2015-09-07T02:37:16.515Z</updated>
    <content type="html"><![CDATA[<p>有一天，pm询问我，生产环境上有一个 report 系统无法从客户端访问，到底是什么问题。<br><a id="more"></a></p>
<p>我怀疑是 report 的服务器挂掉了，于是我打开浏览器，输入服务器的host，然后网页显示打不开。 </p>
<p>然后，我自信的告诉 pm ， 应该是服务器上没有部署或者对应的服务器挂掉了，得去问问运维的人。 然后我发了一封邮件给运维的组。</p>
<p>过了一会，我收到来自一个资深同事的回复,他贴了一段 curl 的信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* Hostname was NOT found in DNS cache</span><br><span class="line">*   Trying xxxxx ...</span><br><span class="line">* Connected to web-proxy.houston.hp.com (xxxxx) port <span class="number">8080</span> (<span class="preprocessor">#<span class="number">0</span>)</span></span><br><span class="line">* Establish HTTP proxy tunnel to xxx:<span class="number">443</span></span><br><span class="line">&gt; CONNECT xxx:<span class="number">443</span> HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; Host: xxx:</span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.35</span><span class="number">.0</span></span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/<span class="number">1.1</span> <span class="number">200</span> Connection established</span><br><span class="line">&lt; </span><br><span class="line">* Proxy replied OK to CONNECT request</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: none</span><br><span class="line">  CApath: /etc/ssl/certs</span><br><span class="line">* SSLv3, TLS handshake, <span class="function">Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Server <span class="title">hello</span> <span class="params">(<span class="number">2</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">CERT</span> <span class="params">(<span class="number">11</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Server <span class="title">finished</span> <span class="params">(<span class="number">14</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, Client key <span class="title">exchange</span> <span class="params">(<span class="number">16</span>)</span>:</span><br><span class="line">* SSLv3, TLS change cipher, Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">Finished</span> <span class="params">(<span class="number">20</span>)</span>:</span><br><span class="line">* SSLv3, TLS change cipher, Client <span class="title">hello</span> <span class="params">(<span class="number">1</span>)</span>:</span><br><span class="line">* SSLv3, TLS handshake, <span class="title">Finished</span> <span class="params">(<span class="number">20</span>)</span>:</span><br><span class="line">* SSL connection <span class="keyword">using</span> AES128-SHA</span><br><span class="line">* Server certificate:</span><br><span class="line">*        subject: C</span>=US; ST=CA; L=Sunnyvale; O=Hewlett Packard; OU=HP Web Services; OU=PremiumSSL Wildcard; CN=*.xxx</span><br><span class="line">*        start date: <span class="number">2013</span>-<span class="number">09</span>-<span class="number">07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT</span><br><span class="line">*        expire date: <span class="number">2014</span>-<span class="number">09</span>-<span class="number">07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> GMT</span><br><span class="line">*        issuer: C=GB; ST=Greater Manchester; L=Salford; O=COMODO CA Limited; CN=COMODO High-Assurance Secure Server CA</span><br><span class="line">*        SSL certificate verify result: <span class="function">certificate has <span class="title">expired</span> <span class="params">(<span class="number">10</span>)</span>, continuing anyway.</span><br><span class="line">&gt; GET /xxx/xxx/xxx?:embed</span>=no&amp;:customViews=yes&amp;devid=<span class="number">94663018</span>-baa2-<span class="number">11e3</span>-<span class="number">99</span>da-<span class="number">1</span>cc1de6f6c7e&amp;token=bearer%<span class="number">200</span>%<span class="number">2F</span>xjdNJ%<span class="number">2F</span>FTTeG3TSfxU93hYA HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.35</span><span class="number">.0</span></span><br><span class="line">&gt; Host: xxx</span><br><span class="line">&gt; Accept: *<span class="comment">/*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 403 Forbidden</span><br><span class="line">* Server nginx/1.6.2 is not blacklisted</span><br><span class="line">&lt; Server: nginx/1.6.2</span><br><span class="line">&lt; Date: Thu, 27 Aug 2015 04:05:15 GMT</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; X-HP-DE<span class="doctag">BUG:</span> xxx :bearer 0/xjdNJ/FTTeG3TSfxU93hYA 403:Permission denied|</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host xxx left intact</span></span><br></pre></td></tr></table></figure>
<p>然后他告诉我们，因为服务器的反向代理的黑名单机制，所以我们的访问都被拒绝了。 再然后， 问题修复。</p>
<p>我深深的被 curl 这个命令折服了。简简单单的一条命令，但是却可以将网络的状况，路由的跳转一一告诉我们，让我们知道，问题大概出在哪里了。 而不是像我之前的做法，只是知道服务器有问题了，但是却并不明白问题是什么。 </p>
<p>作为偏前端的开发，大多数时候，我们都不会接触到后台的服务器，不会了解到简简单单一个http请求，到底辗转多少次，才到达最终的服务。也不明白，看似一般的服务器不响应，其实可能有很多不同的原因。我们也确实没有精力和机会去探索后台服务器的拓扑结构。 但是， curl 命令给了我们这样的能力，可以从最熟悉的http开始，了解后台的构成，机制。 不仅仅是可以解决类似的问题。 而且，也可以开拓视野。仅仅只关注自己业务的部分，很多时候，是远远不够的。</p>
<p><a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">curl 参考</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有一天，pm询问我，生产环境上有一个 report 系统无法从客户端访问，到底是什么问题。<br>]]>
    
    </summary>
    
      <category term="curl" scheme="http://dmoneh.github.io/tags/curl/"/>
    
  </entry>
  
</feed>
